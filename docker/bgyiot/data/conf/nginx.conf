#nginx版本 nginx 1.14.x； 后面新项目使用： 1.16.x
#user  nobody;  #指定nginx用户，一般重新创建一个新用户给nginx

user  root;  #指定nginx用户，需要指定，不指定，可能莫名的403；
# nginx 是一个7层的代理服务，支持对url的转发。对4层的转发，如端口需要使用haproxy， 或者 lvs。 最新的nginx也支持对4层代理了。

worker_processes  4; ## worker_ processes 8; 工作进程:数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。 ；cat /proc/cpuinfo | grep "cpu cores" | uniq

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# pid 特指的是 主进程编号
#pid        logs/nginx.pid;

events {
  worker_connections  102400; ##这里原来是1024，现在后面多家两个0;每一个进程打开的最大连接数；  最大连接数 = worker_processes * worker_connections/4
  multi_accept on; #可以一次建立多个连接
}

env LINUX_HOST; #全局定义环境变量 env LINUX_HOST; #全局定义环境变量 https://blog.csdn.net/weixin_34357436/article/details/89201524

http {
  default_type  application/octet-stream;
  client_max_body_size 500m;# 设置1: 设置上传大小Sven
  server_tokens off; #设置2 隐藏http响应头里面显示nginx版本号，防止别人根据版本漏洞进行攻击

  #设置5：开发阶段，禁止缓存。把下面代码打开，每次请求都是最新的文件。
  #比如，可以自己写一个txt文件，使用微信打开，添加点内容。然后微信在打开，就可以看到效果。
  #注意，不要和  expires 1d; 冲突设置
  add_header Cache-Control no-cache;
  add_header Pragma no-cache;
  add_header Expires 0;

  ##设置6：504报错解决，完美解决Nginx 504 Gateway time-out; 系统有超过 300~500mb的视频，这了，超时时间调整为30分钟；
  ## 有时候，客户上传 比如 500MB的视频，或者导入 上万条的数据， 并且需要 业务处理。就非常慢，这里就调整大这个时间；
  proxy_connect_timeout  10s;#nginx跟后端服务器连接超时时间(代理连接超时)。【【代理服务器和后端的real server之间的超时】】，设置1s 或者 10s把。不能设置太大
  proxy_send_timeout  1800s;#后端服务器数据回传时间(代理发送超时)
  proxy_read_timeout  1800s;#连接成功后，后端服务器响应时间(代理接收超时)
  fastcgi_connect_timeout 1800s;#指定nginx与后端fastcgi server连接超时时间
  fastcgi_send_timeout 1800s;#指定nginx向后端传送请求超时时间（指已完成两次握手后向fastcgi传送请求超时时间）
  fastcgi_read_timeout 1800s;#指定nginx向后端传送响应超时时间（指已完成两次握手后向fastcgi传送响应超时时间）

  #与浏览器的长连接
  keepalive_timeout  1000;#长连接超时时间
  keepalive_requests 500;#500个请求以后，关闭长连接
  keepalive_disable msie6;#ie6禁用

  #    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                      '$status $body_bytes_sent "$http_referer" '
  #                      '"$http_user_agent" "$http_x_forwarded_for"';
  #    access_log  logs/access.log  main;
  #    #默认写日志：打开文件写入关闭，max:缓存的文件描述符数量，inactive缓存时间，valid：检查时间间隔，min_uses：在inactive时间段内使用了多少次加入缓存
  #    open_log_file_cache max=200 inactive=20s valid=1m min_uses=2;

  #charset koi8-r;
  #access_log  logs/host.access.log  main;
  #生产环境关闭把，图书商城和bobo乐园项目，运行几个月10G的日志；tomcat logs/catelina.out也能达到10G;太费空间了
  # 生成环境一般 tomcat日志太多。或者nginx日志太大；
  access_log logs/access.log; #  access_log off;  #error_log /dev/null;

  #只有开启了sendfile，tcp_nopush才起作用
  #tcp_nodelay和tcp_nopush互斥，二者同时开启，nginx会： （1）确保数据包在发送给客户端之前是满的
  #（2）对于最后一个数据包，允许tcp立即发送，没有200ms的延迟
  #    tcp_nodelay on;
  #    sendfile       on;
  #    tcp_nopush     on;

  #开启GZIP压缩功能 压缩级别(gzip_comp_level)，1~10，数字越大压缩的越好，时间也越长，看心情随便改吧；但是越大不一定压缩一直增加
  gzip  on;
  gzip_min_length 2k;
  gzip_buffers 4 16k;
  gzip_comp_level 5;
  gzip_types text/plain application/x-javascript application/javascript text/css application/xml application/json text/javascript application/x-httpd-php image/jpeg image/gif image/png image/svg+xml;
  gzip_vary off;
  gzip_disable "MSIE [1-6]\.";
  gzip_static on; #如果有压缩好的 直接使用
  underscores_in_headers on;

  server {
    listen 80; #映射到容器内部的端口，肯定是80
    server_name  ityun.ltd localhost;

    # 环境变量 LINUX_HOST 是自己定义的
    set_by_lua $LINUX_HOST_IP 'return os.getenv("LINUX_HOST")';

    location / {
      root   html; #对应nginx容器内部,具体容器里面html目录，需要自己查看
      index  index.html index.htm index.jsp index.php;
      #proxy_pass http://tomcat;
    }

    #nginx 之 proxy_pass详解 https://blog.csdn.net/somehow1002/article/details/82872333

    location /adminserver {
        # 这里代理，要么是主机的ip 或者 公网对外的域名
        # 代理adminserver，自身adminserver有问题，这里只能写外网域名了。本来可以写内网地址
        proxy_pass http://192.168.0.208:8000/adminserver;
        # 不能使用 $LINUX_HOST_IP 这种注入的进来的变量
    }

    location /eureka {
        echo $LINUX_HOST_IP;
        # 这里代理，要么是主机的ip 或者 公网对外的域名。不能使用localhost
        proxy_pass http://192.168.0.208:8001/eureka;
    }

    location /iot {
       index swagger-ui.html;
       proxy_pass http://192.168.0.208:8002/iot;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}