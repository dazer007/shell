#nginx版本
#图书商城项目
user  chenzhengchuang;  #指定nginx用户，一般重新创建一个新用户给nginx
worker_processes  4; ## worker_ processes 8; 工作进程:数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。 ；cat /proc/cpuinfo | grep "cpu cores" | uniq

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  102400; ##这里原来是1024，现在后面多家两个0;每一个进程打开的最大连接数；  最大连接数 = worker_processes * worker_connections/4
    multi_accept on; #可以一次建立多个连接
    use epoll;#IO多路复用方式
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 500m;# 设置1: 设置上传大小Sven
    server_tokens off; #设置2 隐藏http响应头里面显示nginx版本号，防止别人根据版本漏洞进行攻击

    ##设置3
    ###start 设置允许跨域，在这里设置了，就不用在java代码设置了：CrossOrigin ####
    ### 一般不要设置*，设置* 容易遭到跨站点 cros攻击，最好只设置运行 访问的外部网站
    #add_header Access-Control-Allow-Origin *; #注释掉，发现我们的java代码和这个同时设置了，结果 前端有两个跨越头；导致跨越是不；  java和nginx这里跨越不能冲突。java后台的*回自动变成访问的网站地址，nginx的会返回*。，结果 前端有两个跨越头；导致跨越是不；  java和nginx这里跨越不能冲突。java后台的*回自动变成访问的网站地址，nginx的会返回*。
    add_header Access-Control-Allow-Headers X-Requested-With;
    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
    add_header Strict-Transport-Security "max-age=31536000"; #解决https证书评分是 A ,不是A+,添加 HSTS
    ###end ###

    # 设置4: 获取客户端ip地址 Sven
    proxy_set_header X-Real-IP  $remote_addr;##获取客户端的真实ip,如果不加，就会代理服务器内网的ip
    proxy_set_header Host $host:$server_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;##防止客户端多层代理，获取不到真实的ip,Forwarded可以获取到 ip,代理ip1,代理ip2...，整个请求过程的所有ip
    proxy_set_header X-Forwarded-Proto $scheme; # scheme
    proxy_set_header X-Forwarded-Scheme  $scheme; #增加一个header, 处理 SSL 认证之后，request.getScheme()获取不到https的问题记录

    # 设置5: 速率限制 + 并发限制 https://www.cnblogs.com/biglittleant/p/8979915.html
    # http://nginx.org/en/docs/  搜索：limit
    #### limit_req_zone 用来限制单位时间内的请求数，即速率限制,采用的漏桶算法 "leaky bucket"。
    #### limit_req_conn 用来限制同一时间连接数，即并发限制。
    ### mylimit_req_name1 : 是自己给规则起的名称，可以随便起，
    ### $binary_remote_addr 是基于客户端ip,
    ### 如果超过限制：Response code: 429、Response message: Too Many Requests
    ### 如果超过限制：Response code: 503、Response message: Service Temporarily Unavailable;  服务器临不可用，服务器限流了
    ### _status 可以自定义超过限流的状态码
    limit_req_zone $binary_remote_addr zone=mylimit_req_name1:10m rate=50r/s;### 生成一个名字mylimit_req_name1的内存区域大小10MB，用来存储访问的>频次信息。50QPS单个ip; rate=1r/s表示允许相同标识的客户端的访问频次，这里限制的是每秒1次，还可以有比如30r/m的。
    limit_req zone=mylimit_req_name1 burst=50 nodelay;##QBS大于阀值，请求排队个数（burst），排队的请求，nodelay（立即执行）
    limit_req_status 429;
    #---
    limit_conn_zone $binary_remote_addr zone=mylimit_conn_name1:10m;##生成一个名字叫做 mylimit_conn_name1的内存区域是10m的连接限制
    limit_conn mylimit_conn_name1 200;##单个ip限制连接数，这里20个
    limit_conn_status 428;

    #设置5：开发阶段，禁止缓存。把下面代码打开，每次请求都是最新的文件。
    #比如，可以自己写一个txt文件，使用微信打开，添加点内容。然后微信在打开，就可以看到效果。
    #注意，不要和  expires 1d; 冲突设置
    add_header Cache-Control no-cache;
    add_header Pragma no-cache;
    add_header Expires 0;

    ##设置6：504报错解决，完美解决Nginx 504 Gateway time-out; 系统有超过 300~500mb的视频，这了，超时时间调整为30分钟；
  proxy_connect_timeout  10s;#nginx跟后端服务器连接超时时间(代理连接超时)。【【代理服务器和后端的real server之间的超时】】，设置1s 或者 10s把。>不能设置太大
  proxy_send_timeout  60s;
  proxy_read_timeout  1800s; #连接成功后，后端服务器响应时间(代理接收超时); ##设置6：【504报错解决，完美解决Nginx 504 Gateway time-out;】【只要>设置 proxy_read_timeout 比较大，别的不用设置】 系统有超过 300~500mb的视频，这了，超时时间调整为30分钟；
  fastcgi_connect_timeout 60s;
  fastcgi_send_timeout 60s;
  fastcgi_read_timeout 60s;

    #    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                      '$status $body_bytes_sent "$http_referer" '
    #                      '"$http_user_agent" "$http_x_forwarded_for"';
    #    access_log  logs/access.log  main;
    #    #默认写日志：打开文件写入关闭，max:缓存的文件描述符数量，inactive缓存时间，valid：检查时间间隔，min_uses：在inactive时间段内使用了多少次加入缓存
    #    open_log_file_cache max=200 inactive=20s valid=1m min_uses=2;


    #只有开启了sendfile，tcp_nopush才起作用
    #tcp_nodelay和tcp_nopush互斥，二者同时开启，nginx会： （1）确保数据包在发送给客户端之前是满的
    #（2）对于最后一个数据包，允许tcp立即发送，没有200ms的延迟
    #    tcp_nodelay on;
    #    sendfile       on;
    #    tcp_nopush     on;


    #与浏览器的长连接
    keepalive_timeout  1000;#长连接超时时间
    keepalive_requests 500;#500个请求以后，关闭长连接
    keepalive_disable msie6;#ie6禁用

  proxy_http_version 1.1; #从http 1.0 => 1.1 并开启 keepalive； 可以降低压测的平均耗时。
  proxy_set_header Connection "";

    #开启GZIP压缩功能 压缩级别(gzip_comp_level)，1~10，数字越大压缩的越好，时间也越长，看心情随便改吧；但是越大不一定压缩一直增加
    gzip  on;
    gzip_min_length 2k;
    gzip_buffers 4 16k;
    gzip_comp_level 5;
    gzip_types text/plain application/x-javascript application/javascript text/css application/xml application/json text/javascript application/x-httpd-php image/jpeg image/gif image/png image/svg+xml;
    gzip_vary off;
    gzip_disable "MSIE [1-6]\.";
    #gzip_static on; #如果有压缩好的 直接使用
    underscores_in_headers on;

    ##########################################
    ##缓存相关还没开启 proxy_cache_path
    ##########################################

    #Nginx 做负载均衡的几种轮询策略
    #ip_hash;每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
    #ip_hash: ❗️❗️❗️问题，可能一台服务器挂掉了，就 部分用户一直访问不了的； 建议使用redis解决session问题；不推荐使用
    #RR; 默认 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
    #weight和访问比率成正比，用于后端服务器性能不均的情况。
    #server 192.168.1.10 weight=1;
    upstream tomcat {
        #ip_hash;
        server 192.168.0.10:80 weight=2;
        #server 127.0.0.1:8081 weight=1;
        keepalive 2000;
    }

    ############################ 婚庆项目配置方式 START #######################
    ####1:强制使用了https使用了`error_page 497  https://$host$uri?$args;` 配置
    ####2:强制使用www这个二级域名，非www 重定向到www `rewrite  ^(.*)    https://www.weddinglove.xyz$1 permanent;` 使用301永久重定向
    ####3:删除了原来80端口的配置，80和443同时写到一个server里面
    ####4: HTTPS server证书配置
    ####4: 说明：比如www.baidu.com 和 music.baidu.com 都是二级域名，即：www 就是二级域名
    #######################################################################
    #server可以配置成多个，每一个都可以配置成为不同的域名。如：测试服务器可以同时是：test.ourslook.com域名；test1.ourslook.com域名，
      # 同时支持 http 和 https 就必须分开写两个server
      server {
        listen       80;
        listen       443;#阿里云端口必须打开
        server_name  www.qcure.com qcure.com;

        ##SSL 每一项配置含有说明、启用免费证书 https://segmentfault.com/a/1190000002866627?utm_source=tag-newest
        ssl on;
        ##SSL 优化， SSL安全，但是也有弊端；ssl握手的时候，需要增加和服务器的链接；这里开启缓存，减小影响
        ssl_session_timeout 10m; #SSL session 会话有效期10分钟 http://nginx.org/en/docs/http/ngx_http_ssl_module.html
        ssl_session_cache shared:SSL:20m;##session 缓存到服务器，大小10MB,一兆字节可以存储大约4000个session
        ## linx
        ssl_certificate    /usr/local/ssl/certs/full_chain.pem; ##说明：这个文件是：证书 + CA证书 两部分合起来的文件，发现有两段
        ssl_certificate_key   /usr/local/ssl/certs/private.key; ##说明：key是私钥private.key;   使用新目录ssl/cert， 防止 nginx目录编号导致的证书丢失
        ## windows 这里全路径
        #ssl_certificate   D:\\freessl\\full_chain.pem; ##说明：这个文件是：证书 + CA证书 两部分合起来的文件，发现有两段
        #ssl_certificate_key  D:\\freessl\\private.key; ##说明：key是私钥private.key

        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;#禁用TLS1.0 TLS (PCI DSS合规判定) v1.0或更早的加密协议将会判定为不合规;TLSv1
        ssl_prefer_server_ciphers on;

        #让http请求重定向到https请求
        error_page 497  https://$host$uri?$args;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        #重定向301 永久重定向  http://www.sojson.com/blog/178.html
        #只是一级域名“sojson.com” 跳转到www.sojson.com去。强制使用www 二级域名 承联官网项目
        #学有惠 nginx 没有做这个配置，并且可以自动跳转到www；其实是错误的：不使用www根本访问不了； 可以 ping xueyouhui.top 根本无法ping通；必须ping www
        #简而言之：域名绑定的是 www.xueyouhui.top这个二级域名
        ## permanent 永久重定向301；redirect:临时重定向 302;      break 停止； last: 停止，并访问一次转发后地址；
        ## ^：以xx开头、()表示一个变量，后面用$1替换，.*正则
        #将所有的http请求通过rewrite重写到https上即可
        #rewrite ^(.*)$  https://$host$1 permanent;
        if ($http_host ~ "^qcure.com$") {
            rewrite  ^(.*)    https://www.qcure.com$1 permanent;
            rewrite ^/qcure$ /qcure/ permanent;##自动增加一个斜杠
        }

        ## 1: nginx官网文档 http://nginx.org/en/docs/
        ## 2: nginx之location的匹配规则  https://www.cnblogs.com/jiangyang/p/8485046.html
        location / {
            root   html;
            index  index.html index.htm;

            proxy_pass http://tomcat/qcure/;

             ## facebook 分享的时候，这里进行代理， 动态 给 facebook 数据
            ## curl -i  -A "facebookexternalhit"  https://qcure.zhixuankj.cn/qcurepc/\?title\=aaaaaa\&image\=bbbbbbb
            if ($http_user_agent ~* "facebookexternalhit") {
                ###### proxy  ^/(.*)$  http://127.0.0.1:7777/ redirect;irect;   #这种不能加$uri后缀了，很麻烦，需要同时有两个tomcat
                #rewrite  ^/(.*)$  https://test189.ourslook.com/qcure/proxy?$uri redirect;  #直接302过去
                rewrite  ^/(.*)$  https://$host/qcure/proxy redirect;  #直接302过去； 后面不用 增加【?$args】; 会自动增加args的
            }

            #如果根目录没有地址，我们给一个默认地址
            try_files $uri /index.html;

            #rewrite ^/$  /hiber/; #rewrite 根目录重定向到子目录下面去，默认是 redirect 301;
            #rewrite ^/ourspro  /book/ permanent; #rewrite 301


            # websocket support。 项目用到websocket 必须开启； 【必须放到 location下面】
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }


        #对应的目录也里面的子目录也必须是：/hiber/upload  所有的图片不走tomcat， 直接使用nginx进行访问了
        #location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$ {
        location /qcure/upload {
          ##缓存时间1d,或者24h,添加这；response header 增加：Cache-Control: max-age=6400、增加：Expires: Sun, 07 Jul 2019 07:25:00 GMT
          expires 10d;

          ####防盗链 根据referers[从那个网站过来的访问]信息来处理 $http_referer
          ### http://nginx.org/en/docs/http/ngx_http_referer_module.html 文档首页搜索：referer
          ### https://blog.51cto.com/467754239/1440464
          ### none 允许没有refefer连接，可以直接访问。
          ### blocked 意为根据防火墙伪装Referer头，如：“Referer: XXXXXXX”。
          ### server_names 为一个或多个服务器的列表
          ### 微信小程序referer 校验 "https://servicewechat.com/wx2e3e1ab7edd235f3/19/page-frame.html"
          ### 测试（-e后面的参数就是 referer参数 ）：curl -e "https://www.baidu.com" -I https://www.jl-media.cn/hiber/upload/advertisement/20190706230145267_dakye.jpg
          ### 测试（-e后面的参数就是 referer参数 ）：curl -e "https://servicewechat.com/wx2e3e1ab7edd235f3/19/page-frame.html" -I https://www.jl-media.cn/hiber/upload/advertisement/20190706230145267_dakye.jpg
          # valid_referers none blocked server_names 47.103.33.96  ~\.jl-media.cn\. ~\.new8090\. servicewechat.com  ~\.google\. ~\.baidu\. *.so.com *.sogou.com ~\.bing\.;
          # if ($invalid_referer) {
          #rewrite ^/http://www.xxx.com/images/default/logo.gif;
          #return 403;#403 Forbidden
          # }

          #做路径映射 break 之后，后面都不会在匹配了
          #rewrite ^/hiber/upload/(.*)$ /hiberUploadRoot/upload/$1 break;
          rewrite ^/qcure/upload/(.*)$ /db_backup/upload/$1 break;
          #rewrite ^/qcure/upload/(.*)$ https://qucre.oss.ityun.ltd/prod/upload/$1 break;

          #指定根路径
          #root   D:\\server;
          root /data;

          #alias  /usr/local/tomcat9/qcureUploadRoot/upload/;## 使用 alias 就不用创建 .well-known/pki-validation 这个文件了
        }

        location /qcure {
            proxy_pass http://tomcat/qcure/;
        }

        location /qcureweb {
          root   html;
        }

        location /qcurepc {
          root   html;
          index  index.html index.htm;
          try_files $uri /index.html;
        }

        location /pro {
          root   html;
        }

        ###代理演示
        #        location ~ ^/baidu {
        #            #proxy_pass http://tomcat/baidu/;##代理到 upstream资质
        #            #proxy_pass http://47.92.231.114/baidu; ##代理到固定ip
        #            rewrite ^/baidu https://www.baidu.com permanent;##302 永久重定向；
        #        }

        # 状态监控
        location /nginx_status {
            stub_status on;
            access_log   off;
            #allow 127.0.0.1;
            #allow 192.168.220.133;
            #deny all;
        }

        #https域名验证, 不设置，nginx 可能变成了直接下载
        location ^~ /.well-known/pki-validation/ {
            default_type "text/plain";
            #root /usr/local/ssl/cert/;
            alias  /usr/local/ssl/certs/;  # 使用 alias 就不用创建 .well-known/pki-validation 这个文件了
            # root D:\\freessl;### windows不能创建.开头文件；可以用windows下cmd cd到服务器路径，然后用md .well-known来创建； 全路径：D:\freessl\.well-known\pki-validation
        }

        error_page   500 502 503 504 404  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

#location:  /usr/local/nginx/conf/
#Afte Upload:  /usr/local/nginx/sbin/nginx -t ;  /usr/local/nginx/sbin/nginx -s reload

#sh /usr/local/sh/tomcat-restart.sh

#sudo chmod 777 /usr/local/sh/tomcat-restart.sh; sh /usr/local/sh/tomcat-restart.sh