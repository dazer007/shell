#nginx版本
#图书商城nginx 1.14 shop.dfww.com.cn/book/
#user  nobody;  #指定nginx用户，一般重新创建一个新用户给nginx
worker_processes  4;## worker_ processes 8; 工作进程:数目。根据硬件调整，通常等于CPU数量或者2倍于CPU。 ；cat /proc/cpuinfo | grep "cpu cores" | uniq

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  102400; ##这里原来是1024，现在后面多家两个0;每一个进程打开的最大连接数；  最大连接数 = worker_processes * worker_connections/4
    multi_accept on; #可以一次建立多个连接
    use epoll;#IO多路复用方式
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 500m;# 设置1: 设置上传大小Sven
    #server_tokens off; #设置2 隐藏http响应头里面显示nginx版本号，防止别人根据版本漏洞进行攻击

    ##设置3
    ###start 设置允许跨域，在这里设置了，就不用在java代码设置了：CrossOrigin ####
    ### 一般不要设置*，设置* 容易遭到跨站点 cros攻击，最好只设置运行 访问的外部网站
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Headers X-Requested-With;
    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
    ###end ###

    # 设置4: 获取客户端ip地址 Sven
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header Host $host:$server_port;

    #add_header Cache-Control no-cache;
    #add_header Pragma no-cache;
    #add_header Expires 0;

    #与浏览器的长连接
    keepalive_timeout  65;#长连接超时时间
    keepalive_requests 500;#500个请求以后，关闭长连接
    keepalive_disable msie6;#ie6禁用

    ##设置6：504报错解决，完美解决Nginx 504 Gateway time-out; 系统有超过 300~500mb的视频，这了，超时时间调整为30分钟；
    ## 有时候，客户上传 比如 500MB的视频，或者导入 上万条的数据， 并且需要 业务处理。就非常慢，这里就调整大这个时间；
    proxy_connect_timeout 10s;#nginx跟后端服务器连接超时时间(代理连接超时)
    proxy_send_timeout  60s;#后端服务器数据回传时间(代理发送超时)
    proxy_read_timeout  3600s;#连接成功后，后端服务器响应时间(代理接收超时)
    fastcgi_connect_timeout 60s;
    fastcgi_send_timeout 60s;#指定nginx向后端传送请求超时时间（指已完成两次握手后向?
    fastcgi_read_timeout 60s;#指定nginx向后端传送响应超时时间（指已完成两次握手后向fastcgi传送响应超时时间）

    #安恒安全检查问题
    # 隐藏敏感信息的转发，比如：服务器php的版本、服务
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;
    server_tokens off; #隐藏nginx的版本号,让访问者不知道自己使用的什么版本；

    #开启GZIP压缩功能
    gzip  on;
    gzip_min_length 2k;
    gzip_buffers 4 16k;
    gzip_comp_level 8;
    gzip_vary off;
    gzip_disable "MSIE [1-6]\.";
    #gzip_static on; #如果有压缩好的 直接使用

    underscores_in_headers on;

    #access_log  logs/host.access.log  main;
    #生产环境关闭把，图书商城和bobo乐园项目，运行几个月10G的日志；tomcat logs/catelina.out也能达到10G;太费空间了
    # 生成环境一般 tomcat日志太多。或者nginx日志太大；
    access_log logs/access.log main;
    #access_log off;
    error_log /dev/null;

    #安恒安全检查问题
    # 隐藏敏感信息的转发，比如：服务器php的版本、服务
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;
    server_tokens off; #隐藏nginx的版本号,让访问者不知道自己使用的什么版本；


    ##########################################
    ##缓存相关还没开启 proxy_cache_path
    ##########################################

    #ip_hash;每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
    #RR; 默认 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
    #weight和访问比率成正比，用于后端服务器性能不均的情况。
    #server 192.168.1.10 weight=1;
    upstream tomcat {
        # ip_hash;
        server 127.0.0.1:8081 weight=5  max_fails=1 fail_timeout=20s;
        # server 47.103.33.96:80 weight=1  max_fails=1 fail_timeout=20s;
        #  server 47.100.222.146:80 weight=1  max_fails=1 fail_timeout=20s;
    }

    upstream tomcatbobo {
        server 127.0.0.1:8080;
        keepalive 2000;
    }

    server {
        server_name localhost;
        listen 80;
        location /metrics {
            proxy_pass http://localhost:9104;
        }

    }

    #Server 配置1（图书商城）（shop.dfww.com.cn） 支持https、
    server {
        listen       80;
        listen       443;#阿里云端口必须打开
        server_name  shop.dfww.com.cn;


        ##SSL 每一项配置含有说明、启用免费证书 https://segmentfault.com/a/1190000002866627?utm_source=tag-newest
        ssl on;
        ##SSL 优化， SSL安全，但是也有弊端；ssl握手的时候，需要增加和服务器的链接；这里开启缓存，减小影响
        ssl_session_timeout 10m; #SSL session 会话有效期10分钟 http://nginx.org/en/docs/http/ngx_http_ssl_module.html
        ssl_session_cache shared:SSL:20m;##session 缓存到服务器，大小10MB,一兆字节可以存储大约4000个session
        ## linx
        ssl_certificate   /usr/local/nginx/cert/full_chain.pem; ##说明：这个文件是：证书 + CA证书 两部分合起来的文件，发现有两段
        ssl_certificate_key  /usr/local/nginx/cert/private.key; ##说明：key是私钥private.key
        ## windows 这里全路径
        #ssl_certificate   D:\\server\\nginx\\cert\\full_chain.pem; ##说明：这个文件是：证书 + CA证书 两部分合起来的文件，发现有两段
        #ssl_certificate_key  D:\\server\\nginx\\cert\\private.key; ##说明：key是私钥private.key

        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;

        #让http请求重定向到https请求
        error_page 497  https://$host$uri?$args;

        ## 1: nginx官网文档 http://nginx.org/en/docs/
        ## 2: nginx之location的匹配规则  https://www.cnblogs.com/jiangyang/p/8485046.html

          location / {
              root html;
              index index.html index.html;
              try_files $uri $uri/ index.html;
          }

        location /mall {
            proxy_pass http://tomcat/mall;
        }

        location /bobo {
            proxy_pass http://tomcatbobo/bobo;
        }

        location /book {
            root   html;
            index  index.html index.htm;
            #rewrite  ^(.*)  https://www.jl-media.cn/hiber/ permanent;
        }
        # 状态监控
        location /nginx_status {
            stub_status on;
            access_log   off;
            #allow 127.0.0.1;
            #allow 192.168.220.133;
            #deny all;
        }

        #https域名验证, 不设置，nginx 可能变成了直接下载
        location ^~ /.well-known/pki-validation/ {
            default_type "text/plain";
            #root /usr/local/ssl/cert/;
            alias  /usr/local/nginx/cert;  # 使用 alias 就不用创建 .well-known/pki-validation 这个文件了
            #root D:\\freessl;### windows不能创建.开头文件；可以用windows下cmd cd到服务器路径，然后用md .well-known来创建； 全路径：D:\freessl\.well-known\pki-validation
        }

        error_page   500 502 503 504 404  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    #Server 配置2（ourslook teleport 代理配置）（server.mixfm.cn） 支持https、
    server {
        listen       80;
        listen       443;#阿里云端口必须打开
        server_name  server.mixfm.cn;

        ##SSL 每一项配置含有说明、启用免费证书 https://segmentfault.com/a/1190000002866627?utm_source=tag-newest
        ssl on;
        ##SSL 优化， SSL安全，但是也有弊端；ssl握手的时候，需要增加和服务器的链接；这里开启缓存，减小影响
        ssl_session_timeout 10m; #SSL session 会话有效期10分钟 http://nginx.org/en/docs/http/ngx_http_ssl_module.html
        ssl_session_cache shared:SSL:20m;##session 缓存到服务器，大小10MB,一兆字节可以存储大约4000个session
        ## linx
        ssl_certificate   /usr/local/nginx/cert-server.mixfm.cn/full_chain.pem; ##说明：这个文件是：证书 + CA证书 两部分合起来的文件，发现有两段
        ssl_certificate_key  /usr/local/nginx/cert-server.mixfm.cn/private.key; ##说明：key是私钥private.key
        ## windows 这里全路径
        #ssl_certificate   D:\\server\\nginx\\cert\\full_chain.pem; ##说明：这个文件是：证书 + CA证书 两部分合起来的文件，发现有两段
        #ssl_certificate_key  D:\\server\\nginx\\cert\\private.key; ##说明：key是私钥private.key

        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;

        #让http请求重定向到https请求
        error_page 497  https://$host$uri?$args;

        ## 1: nginx官网文档 http://nginx.org/en/docs/
        ## 2: nginx之location的匹配规则  https://www.cnblogs.com/jiangyang/p/8485046.html

          location / {
              proxy_pass http://localhost:7190;
          }
    }

    #Server 配置3（ourslook teleport 代理配置）（teleport2.ltyun.ltd）
    server {
        listen       80;
        server_name  teleport2.ityun.ltd;

        location / {
           proxy_pass http://localhost:7190;
        }
    }
}

